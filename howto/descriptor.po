# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Leon H., 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-15 20:43+0000\n"
"PO-Revision-Date: 2023-05-26 12:31+0000\n"
"Last-Translator: andyjjrt <andyjjrt@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-tw)"
"\n"
"Language: descriptor\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.16.4\n"

#: ../../howto/descriptor.rst:5
msgid "Descriptor HowTo Guide"
msgstr "修飾器 HowTo 指南"

#: ../../howto/descriptor.rst:0
msgid "Author"
msgstr "作者"

#: ../../howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../howto/descriptor.rst:0
msgid "Contact"
msgstr "聯絡方式"

#: ../../howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr "<python at rcn dot com>"

#: ../../howto/descriptor.rst:11
msgid "Contents"
msgstr "目錄"

#: ../../howto/descriptor.rst:13
msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ":term:`描述符 <descriptor>` 讓對象自定義屬性的查找、儲存和刪除。"

#: ../../howto/descriptor.rst:16
msgid "This guide has four major sections:"
msgstr "本指南共有四個主要部分："

#: ../../howto/descriptor.rst:18
msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  Start here if you're new to descriptors."
msgstr "「入門篇」提供了基本概述，從簡單的範例開始逐步增加功能。如果您是修飾器的初學"
"者，請從這裡開始。"

#: ../../howto/descriptor.rst:21
msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr "第二部分展示了一個完整的實用修飾器範例。如果您已經了解基礎知識，可以從這裡開"
"始。"

#: ../../howto/descriptor.rst:24
msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr "第三部分提供了一個更加技術性的教學，深入探討修飾器的詳細機制。大多數人不需要"
"這種細節等級的內容。"

#: ../../howto/descriptor.rst:28
msgid ""
"The last section has pure Python equivalents for built-in descriptors that "
"are written in C.  Read this if you're curious about how functions turn into "
"bound methods or about the implementation of common tools like :func:"
"`classmethod`, :func:`staticmethod`, :func:`property`, and :term:`__slots__`."
msgstr ""
"最後一部分提供了一些純 Python 的內建修飾器，這些修飾器在 C "
"語言中寫成。如果您對函數如何變成綁定方法或常用工具（如 :func:`classmethod` 、"
" :func:`staticmethod` 、 :func:`property` 和 :term: `__slots__` "
"）的實現方式感到好奇，請閱讀此部分。"

#: ../../howto/descriptor.rst:36
msgid "Primer"
msgstr "入門篇"

#: ../../howto/descriptor.rst:38
msgid ""
"In this primer, we start with the most basic possible example and then we'll "
"add new capabilities one by one."
msgstr "在這個入門篇中，我們從最基本的例子開始，然後逐步增加新的功能。"

#: ../../howto/descriptor.rst:43
msgid "Simple example: A descriptor that returns a constant"
msgstr "簡單的例子：一個回傳常數的修飾器"

#: ../../howto/descriptor.rst:45
msgid ""
"The :class:`Ten` class is a descriptor whose :meth:`__get__` method always "
"returns the constant ``10``:"
msgstr ":class:`Ten` 類別是一個修飾器，其 :meth:`__get__` 方法始終回傳常數 ``10``："

#: ../../howto/descriptor.rst:54
msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class:"
msgstr "要使用修飾器，它必須作為另一個類別中的類變量儲存："

#: ../../howto/descriptor.rst:62
msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup:"
msgstr "一個交互式會話演示了普通屬性查找和修飾器查找之間的區別："

#: ../../howto/descriptor.rst:73
msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds ``'x': 5`` in the "
"class dictionary.  In the ``a.y`` lookup, the dot operator finds a "
"descriptor instance, recognized by its ``__get__`` method. Calling that "
"method returns ``10``."
msgstr ""
"在 ``a.x`` 屬性查找中，點運算符在類別字典中找到了 ``'x': 5``。在 ``a.y`` "
"查找中，點運算符找到了一個修飾器實例，通過其 ``__get__`` 方法識別。"
"使用該方法回傳了 ``10``。"

#: ../../howto/descriptor.rst:78
msgid ""
"Note that the value ``10`` is not stored in either the class dictionary or "
"the instance dictionary.  Instead, the value ``10`` is computed on demand."
msgstr "請注意，值 ``10`` 沒有儲存在類別字典或實例字典中。相反，值 ``10`` "
"在需要時被計算。"

#: ../../howto/descriptor.rst:81
msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr "這個範例展示了簡單修飾器的運作方式，但並不是很實用。對於取得常數來說，一般的"
"屬性查找會比較好。"

#: ../../howto/descriptor.rst:84
msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr "在接下來的章節中，我們將創建一個更實用的功能，動態查找。"

#: ../../howto/descriptor.rst:88
msgid "Dynamic lookups"
msgstr "動態查找"

#: ../../howto/descriptor.rst:90
msgid ""
"Interesting descriptors typically run computations instead of returning "
"constants:"
msgstr "有用的修飾器通常執行運算而非返回常數:"

#: ../../howto/descriptor.rst:109
msgid ""
"An interactive session shows that the lookup is dynamic — it computes "
"different, updated answers each time::"
msgstr "互動式會話顯示查找是動態的—每次都會計算出不同的、更新的答案::"

#: ../../howto/descriptor.rst:122
msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is "
"either *g* or *s*, an instance of *Directory*.  It is the *obj* parameter "
"that lets the :meth:`__get__` method learn the target directory.  The "
"*objtype* parameter is the class *Directory*."
msgstr ""
"除了展示修飾器可以執行計算之外，這個例子還揭示了傳遞給 :meth: ` __get__` "
"參數的目的。 * self * 參數是 * size *，一個 * DirectorySize * 實例。\n"
"* obj * 參數可以是 * g * 或 * s *，這兩者都是 * Directory* 的實例。:meth: ` "
"__get__ ` 能夠透過 * obj * 參數來學習目標目錄，而 * objtype * 參數則代表 * "
"Directory * 這個類別。"

#: ../../howto/descriptor.rst:131
msgid "Managed attributes"
msgstr "受管理屬性"

#: ../../howto/descriptor.rst:133
msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance "
"dictionary.  The descriptor's :meth:`__get__` and :meth:`__set__` methods "
"are triggered when the public attribute is accessed."
msgstr ""
"修飾器的一個常見用途是管理對實例數據的訪問。修飾器被分配給類字典中的公共屬性"
"，而實際數據則存儲為實例字典中的私有屬性。修飾器的 :meth\" ` __get__ ` 跟 "
":meth: ` __set__ `方法會在公共屬性被訪問時觸發。"

#: ../../howto/descriptor.rst:139
msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update:"
msgstr "在接下來的舉例中， * age * 是公共屬性 * age "
"*是私有屬性。當公共屬性被訪問時，修飾器會記錄查找或更新:"

#: ../../howto/descriptor.rst:172
msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged:"
msgstr "一個交互式會話顯示，所有對管理屬性 * age * 的訪問都會被記錄下來，但常規屬性 *"
" name * 則未被記錄:"

#: ../../howto/descriptor.rst:206
msgid ""
"One major issue with this example is that the private name *_age* is "
"hardwired in the *LoggedAgeAccess* class.  That means that each instance can "
"only have one logged attribute and that its name is unchangeable.  In the "
"next example, we'll fix that problem."
msgstr ""
"這個例子的一個主要問題是私有名稱 * _age * 在 * LoggedAgeAccess * 類中是固線式"
"的。這意味著每個實例只能有一個記錄的屬性，而且它的名稱是不能更改的。在下一個"
"例子中，我們將解決這個問題。"

#: ../../howto/descriptor.rst:213
msgid "Customized names"
msgstr "客製化名稱"

#: ../../howto/descriptor.rst:215
msgid ""
"When a class uses descriptors, it can inform each descriptor about which "
"variable name was used."
msgstr "當一個類別使用修飾器時，它可以通知每個修飾器使用了哪個變量名。"

#: ../../howto/descriptor.rst:218
msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*:"
msgstr ""
"在這個例子中， :class: ` Person ` 類有兩個修飾器實例，* name * 和 * age *。 "
"當:class: ` Person ` 被定義時，它會調用 * LoggedAccess * 中的 :meth: ` "
"__set_name__ ` 回調函數，以便記錄字段名稱，為每個修飾器提供自己的 * "
"public_name * 和 * private_name *:"

#: ../../howto/descriptor.rst:256
msgid ""
"An interactive session shows that the :class:`Person` class has called :meth:"
"`__set_name__` so that the field names would be recorded.  Here we call :"
"func:`vars` to look up the descriptor without triggering it:"
msgstr ""
"一個互動式會話顯示， :class: ` Person ` 類已調用 :meth: `__set_name__ "
"`，以記錄字段名稱。 在這裡我們調用 :func:vars 來查找修飾器，卻不會觸發它:"

#: ../../howto/descriptor.rst:267
msgid "The new class now logs access to both *name* and *age*:"
msgstr "新的類別會被記錄到 * name * 跟 * age *:"

#: ../../howto/descriptor.rst:284
msgid "The two *Person* instances contain only the private names:"
msgstr "這兩個 * Person * 實例僅包含私有名稱:"

#: ../../howto/descriptor.rst:295
msgid "Closing thoughts"
msgstr "結語"

#: ../../howto/descriptor.rst:297
msgid ""
"A :term:`descriptor` is what we call any object that defines :meth:"
"`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""
"一個 :term:`descriptor` 是指任何定義了 :meth:`__get__`、:meth:`__set__`、或 "
":meth:`__delete__` 中的一種或多種方法的物件。"

#: ../../howto/descriptor.rst:300
msgid ""
"Optionally, descriptors can have a :meth:`__set_name__` method.  This is "
"only used in cases where a descriptor needs to know either the class where "
"it was created or the name of class variable it was assigned to.  (This "
"method, if present, is called even if the class is not a descriptor.)"
msgstr ""
"選擇性地，修飾器可以擁有 `:meth:`__set_name__` 方法。這僅在修飾器需要知道它被"
"建立的類別或是它被賦予的類別變數的名稱時才會使用。（即使該方法存在，如果該類"
"別不是修飾器，該方法也會被調用。）"

#: ../../howto/descriptor.rst:305
msgid ""
"Descriptors get invoked by the dot operator during attribute lookup.  If a "
"descriptor is accessed indirectly with ``vars(some_class)"
"[descriptor_name]``, the descriptor instance is returned without invoking it."
msgstr ""
"修飾器會在屬性查找時透過點運算子被呼叫。如果透過 "
"``vars(some_class)[descriptor_name]`` "
"間接存取修飾器，則會直接回傳修飾器實例，而不會呼叫它。"

#: ../../howto/descriptor.rst:309
msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr "修飾器（Descriptors）只有在作為類別變數時才有效。如果放在實例中，則不起作用。"

#: ../../howto/descriptor.rst:312
msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during attribute lookup."
msgstr "主要的動機是為了提供一個鉤子（Hook），讓存儲在類變數中的物件在屬性查找期間控"
"制發生的事情。"

#: ../../howto/descriptor.rst:315
msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr "傳統上，呼叫類別控制查找期間的過程。修飾器將此關係倒轉並允許被查找的資料發表"
"意見。"

#: ../../howto/descriptor.rst:319
msgid ""
"Descriptors are used throughout the language.  It is how functions turn into "
"bound methods.  Common tools like :func:`classmethod`, :func:"
"`staticmethod`, :func:`property`, and :func:`functools.cached_property` are "
"all implemented as descriptors."
msgstr ""
"修飾器在語言中被廣泛使用。這是函數如何變成綁定方法的作法。常用的工具例如 "
":func:`classmethod`、:func:`staticmethod`、:func:`property` 和 "
":func:`functools.cached_property` 都是以修飾器實現的。"

#: ../../howto/descriptor.rst:326
msgid "Complete Practical Example"
msgstr "完整實例"

#: ../../howto/descriptor.rst:328
msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr "在這個範例中，我們建立了一個實用而強大的工具，用於定位非常難以找到的資料損壞"
"錯誤。"

#: ../../howto/descriptor.rst:333
msgid "Validator class"
msgstr "驗證器類別"

#: ../../howto/descriptor.rst:335
msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevent data corruption at its source."
msgstr ""
"一個 validator 是用來管理屬性存取的修飾器。在儲存任何資料之前，它會驗證新值是"
"否符合各種類型和範圍限制。如果這些限制沒有被滿足，它會拋出異常以防止數據在源"
"頭上被破壞。"

#: ../../howto/descriptor.rst:340
msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor:"
msgstr "這個 :class:`Validator` 類別同時是個 :term:`abstract base class` "
"和一個被管理的屬性修飾器："

#: ../../howto/descriptor.rst:363
msgid ""
"Custom validators need to inherit from :class:`Validator` and must supply a :"
"meth:`validate` method to test various restrictions as needed."
msgstr ""
"自訂驗證器需要繼承 :class:`Validator` 類別，並且必須提供一個 :meth:`validate`"
" 方法，以便根據需要測試各種限制。"

#: ../../howto/descriptor.rst:368
msgid "Custom validators"
msgstr "自定義驗證器"

#: ../../howto/descriptor.rst:370
msgid "Here are three practical data validation utilities:"
msgstr "以下是三個實用的資料驗證工具："

#: ../../howto/descriptor.rst:372
msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr "class:`OneOf` 用於驗證某個值是否屬於一組限制選項中的其中之一。"

#: ../../howto/descriptor.rst:374
msgid ""
":class:`Number` verifies that a value is either an :class:`int` or :class:"
"`float`.  Optionally, it verifies that a value is between a given minimum or "
"maximum."
msgstr ""
":class:`Number` 會驗證一個值是否為 :class:`int` 或 "
":class:`float`，同時可以選擇性地驗證該值是否在給定的最小值和最大值之間。"

#: ../../howto/descriptor.rst:378
msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  It can validate a user-defined "
"`predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ "
"as well."
msgstr ""
":class:`String` 可以驗證值是否為 :class:`str` "
"。此外，它還可以驗證給定的最小或最大長度。它也可以驗證使用者定義的 `"
"predicate <https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)>`_ 。"

#: ../../howto/descriptor.rst:437
msgid "Practical application"
msgstr "實例應用"

#: ../../howto/descriptor.rst:439
msgid "Here's how the data validators can be used in a real class:"
msgstr "以下是資料驗證器在真實類別中的使用方式："

#: ../../howto/descriptor.rst:454
msgid "The descriptors prevent invalid instances from being created:"
msgstr "這些修飾器可以防止無效的實例被建立："

#: ../../howto/descriptor.rst:481
msgid "Technical Tutorial"
msgstr "技術教程"

#: ../../howto/descriptor.rst:483
msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr "以下是關於修飾器如何運作的更為技術性的教程，介紹其機制和詳細細節。"

#: ../../howto/descriptor.rst:488
msgid "Abstract"
msgstr "摘要"

#: ../../howto/descriptor.rst:490
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Provides an example showing how object relational mappings work."
msgstr ""
"定義修飾器（Descriptors），概述協議（Protocol），並展示修飾器如何被呼叫。提供"
"一個範例，說明物件關聯對應（Object Relational Mappings）的運作方式。"

#: ../../howto/descriptor.rst:493
msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works."
msgstr "學習修飾器不僅提供更廣泛的工具集，還可以深入了解 Python 的運作方式。"

#: ../../howto/descriptor.rst:498
msgid "Definition and introduction"
msgstr "定義和介紹"

#: ../../howto/descriptor.rst:500
msgid ""
"In general, a descriptor is an attribute value that has one of the methods "
"in the descriptor protocol.  Those methods are :meth:`__get__`, :meth:"
"`__set__`, and :meth:`__delete__`.  If any of those methods are defined for "
"an attribute, it is said to be a :term:`descriptor`."
msgstr ""
"一般來說，修飾器是擁有修飾器協議中的一種方法的屬性值。這些方法是 "
":meth:`__get__` 、:meth:`__set__` 和 :meth:`__delete__` "
"。如果一個屬性定義了這些方法中的任何一個，那麼它就被稱為 :term:`descriptor` "
"。"

#: ../../howto/descriptor.rst:505
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and "
"continuing through the method resolution order of ``type(a)``. If the looked-"
"up value is an object defining one of the descriptor methods, then Python "
"may override the default behavior and invoke the descriptor method instead. "
"Where this occurs in the precedence chain depends on which descriptor "
"methods were defined."
msgstr ""
"屬性存取的預設行為為從物件的字典中取得、設定或刪除屬性。例如，對於 ``a.x`` "
"的查找鏈，起始於 ``a.__dict__['x']``，然後是 ``type(a).__dict__['x']``，"
"接著繼續通過 ``type(a)`` "
"的方法解析順序。如果找到的值是定義其中一個修飾器方法的物件，那麼 Python 可能"
"會覆蓋預設行為，並調用修飾器方法。這取決於定義了哪些修飾器方法而決定其在優先"
"順序鏈中的位置。"

#: ../../howto/descriptor.rst:514
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and :"
"func:`super()`.  They are used throughout Python itself.  Descriptors "
"simplify the underlying C code and offer a flexible set of new tools for "
"everyday Python programs."
msgstr ""
"修飾器（Descriptors）是一種強大的通用協議。它們是屬性（properties）、方法（me"
"thods）、靜態方法（static methods）、類方法（class methods）和 "
":func:`super()` 背後的機制。它們在 Python 內部被廣泛使用。修飾器簡化了底層的 "
"C 程式碼，為日常使用的 Python 程式提供了一個靈活的新工具集。"

#: ../../howto/descriptor.rst:522
msgid "Descriptor protocol"
msgstr "修飾器協議"

#: ../../howto/descriptor.rst:524
msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr "``descr.__get__(self, obj, type=None) -> value``"

#: ../../howto/descriptor.rst:526
msgid "``descr.__set__(self, obj, value) -> None``"
msgstr "``descr.__set__(self, obj, value) -> None``"

#: ../../howto/descriptor.rst:528
msgid "``descr.__delete__(self, obj) -> None``"
msgstr "``descr.__delete__(self, obj) -> None``"

#: ../../howto/descriptor.rst:530
msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr "這就是全部。若定義了這些方法任一個，物件將被視為修飾器，並可在被當作屬性查找"
"時覆寫預設的行為。"

#: ../../howto/descriptor.rst:534
msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered "
"a data descriptor.  Descriptors that only define :meth:`__get__` are called "
"non-data descriptors (they are often used for methods but other uses are "
"possible)."
msgstr ""
"如果一個物件定義了 :meth:`__set__` 或 :meth:`__delete__` "
"方法，則它被視為資料修飾器（data descriptor）。只定義了 :meth:`__get__` "
"方法的修飾器被稱為非資料描述符（non-data "
"descriptor）（通常用於方法，但也有其他用途）。"

#: ../../howto/descriptor.rst:539
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary "
"has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""
"資料修飾器和非資料修飾器，其在計算物件實例字典中的覆寫時的優先順序有所不同。"
"如果一個物件實例字典中有一個與資料描述符同名的項目，則資料修飾器優先。如果一"
"個對象實例字典中有一個與非資料修飾器同名的項目，則字典項目優先。"

#: ../../howto/descriptor.rst:545
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and :meth:"
"`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` when "
"called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""
"為了建立一個唯讀資料修飾器，需定義 :meth:__get__ 和 :meth:__set__ 兩個方法，"
"其中 :meth:__set__ 方法需在被呼叫時拋出 :exc:AttributeError 錯誤。如果定義 "
":meth:__set__ 方法，其中包含一個拋出例外的佔位符，即足以讓它成為資料修飾器。"

#: ../../howto/descriptor.rst:552
msgid "Overview of descriptor invocation"
msgstr "概述修飾器的調用"

#: ../../howto/descriptor.rst:554
msgid ""
"A descriptor can be called directly with ``desc.__get__(obj)`` or ``desc."
"__get__(None, cls)``."
msgstr "一個修飾器可以直接使用 ``desc.__get__(obj)`` 或 ``desc.__get__(None, cls)`` "
"被呼叫，。"

#: ../../howto/descriptor.rst:557
msgid ""
"But it is more common for a descriptor to be invoked automatically from "
"attribute access."
msgstr "但從屬性存取自動調用修飾器更為常見。"

#: ../../howto/descriptor.rst:560
msgid ""
"The expression ``obj.x`` looks up the attribute ``x`` in the chain of "
"namespaces for ``obj``.  If the search finds a descriptor outside of the "
"instance ``__dict__``, its :meth:`__get__` method is invoked according to "
"the precedence rules listed below."
msgstr ""
"表達式 ``obj.x`` 會在 ``obj`` 的 namespace 鏈中尋找屬性 ``x``。"
"如果搜尋到一個在實例的 ``__dict__`` 以外的修飾器，會根據下面的優先順序調用其 "
":meth:`__get__` 方法。"

#: ../../howto/descriptor.rst:565
msgid ""
"The details of invocation depend on whether ``obj`` is an object, class, or "
"instance of super."
msgstr "當 ``obj`` 是物件、類別或 super 的實例時，其呼叫的細節會有所不同。"

#: ../../howto/descriptor.rst:570
msgid "Invocation from an instance"
msgstr "從實例調用"

#: ../../howto/descriptor.rst:572
msgid ""
"Instance lookup scans through a chain of namespaces giving data descriptors "
"the highest priority, followed by instance variables, then non-data "
"descriptors, then class variables, and lastly :meth:`__getattr__` if it is "
"provided."
msgstr ""
"實例查找會掃描一系列命名空間，賦予數據修飾器最高的優先級，其次是實例變量，然"
"後是非數據修飾器，然後是類變量，最後是 :meth:`__getattr__`（如果有的話）。"

#: ../../howto/descriptor.rst:577
msgid ""
"If a descriptor is found for ``a.x``, then it is invoked with: ``desc."
"__get__(a, type(a))``."
msgstr "如果找到 ``a.x`` 的修飾器，則使用 ``desc.__get__(a, type(a))`` 調用它。"

#: ../../howto/descriptor.rst:580
msgid ""
"The logic for a dotted lookup is in :meth:`object.__getattribute__`.  Here "
"is a pure Python equivalent:"
msgstr "點號查找的邏輯在 :meth:`object.__getattribute__` 中。以下是等效的純 Python "
"程式碼："

#: ../../howto/descriptor.rst:719
msgid ""
"Note, there is no :meth:`__getattr__` hook in the :meth:`__getattribute__` "
"code.  That is why calling :meth:`__getattribute__` directly or with "
"``super().__getattribute__`` will bypass :meth:`__getattr__` entirely."
msgstr ""
"值得注意的是，在 :meth:`__getattribute__` 代碼中沒有 :meth:`__getattr__` "
"鉤子（Hook）。這就是為什麼直接調用 :meth:`__getattribute__` 或使用 ``super()."
"__getattribute__`` 會繞過 :meth:`__getattr__` 的原因。"

#: ../../howto/descriptor.rst:723
msgid ""
"Instead, it is the dot operator and the :func:`getattr` function that are "
"responsible for invoking :meth:`__getattr__` whenever :meth:"
"`__getattribute__` raises an :exc:`AttributeError`.  Their logic is "
"encapsulated in a helper function:"
msgstr ""
"而是點運算符和 :func:`getattr` 函數負責在 :meth:`__getattribute__` 觸發 "
":exc:`AttributeError` 時調用 :meth:`__getattr__`。這些邏輯封裝在輔助函式中："

#: ../../howto/descriptor.rst:773
msgid "Invocation from a class"
msgstr "從類別調用"

#: ../../howto/descriptor.rst:775
msgid ""
"The logic for a dotted lookup such as ``A.x`` is in :meth:`type."
"__getattribute__`.  The steps are similar to those for :meth:`object."
"__getattribute__` but the instance dictionary lookup is replaced by a search "
"through the class's :term:`method resolution order`."
msgstr ""
"點號查找（如 ``A.x``）的邏輯在 :meth:`type.__getattribute__` 中。其方法與 "
":meth:`object.__getattribute__` 相似，但實例字典查找被替換為搜索類的 "
":term:`方法解析順序`。"

#: ../../howto/descriptor.rst:780
msgid "If a descriptor is found, it is invoked with ``desc.__get__(None, A)``."
msgstr "如果找到修飾器，則調用 ``desc.__get__(None, A)`` 。"

#: ../../howto/descriptor.rst:782
msgid ""
"The full C implementation can be found in :c:func:`type_getattro()` and :c:"
"func:`_PyType_Lookup()` in :source:`Objects/typeobject.c`."
msgstr ""
"完整的 C 實現可以在 :source:`Objects/typeobject.c` 中的 "
":c:func:`type_getattro()` 和 :c:func:`_PyType_Lookup()` 中找到。"

#: ../../howto/descriptor.rst:787
#, fuzzy
msgid "Invocation from super"
msgstr "從 super 調用"

#: ../../howto/descriptor.rst:789
#, fuzzy
msgid ""
"The logic for super's dotted lookup is in the :meth:`__getattribute__` "
"method for object returned by :class:`super()`."
msgstr "super 的點號查找邏輯在回傳對象的 :meth:`__getattribute__` 方法中。"

#: ../../howto/descriptor.rst:792
msgid ""
"A dotted lookup such as ``super(A, obj).m`` searches ``obj.__class__."
"__mro__`` for the base class ``B`` immediately following ``A`` and then "
"returns ``B.__dict__['m'].__get__(obj, A)``.  If not a descriptor, ``m`` is "
"returned unchanged."
msgstr ""
"像 ``super(A, obj).m`` 這樣的點號查找會在 ``obj.__class__.__mro__`` "
"中搜索跟在 ``A`` 後面的基礎類別 ``B``，然後返回 ``B.__dict__['m'].__get__("
"obj, A)``。如果不是修飾器，則返回未改變的 ``m``。"

#: ../../howto/descriptor.rst:797
msgid ""
"The full C implementation can be found in :c:func:`super_getattro()` in :"
"source:`Objects/typeobject.c`.  A pure Python equivalent can be found in "
"`Guido's Tutorial <https://www.python.org/download/releases/2.2.3/descrintro/"
"#cooperation>`_."
msgstr ""
"完整的 C 實現可以在 :source:`Objects/typeobject.c` 的 "
":c:func:`super_getattro()` 中找到。在 `Guido's Tutorial <https://www.python."
"org/download/releases/2.2.3/descrintro/#cooperation>`_ 中也可以找到一個純 "
"Python 的等效版本。"

#: ../../howto/descriptor.rst:804
msgid "Summary of invocation logic"
msgstr "調用邏輯的總結"

#: ../../howto/descriptor.rst:806
msgid ""
"The mechanism for descriptors is embedded in the :meth:`__getattribute__()` "
"methods for :class:`object`, :class:`type`, and :func:`super`."
msgstr ""
"修飾器的機制嵌入在 :class:`object`、:class:`type` 和 :func:`super` 的 "
":meth:`__getattribute__()` 方法中。"

#: ../../howto/descriptor.rst:809
msgid "The important points to remember are:"
msgstr "幾項需要記得的要點："

#: ../../howto/descriptor.rst:811
msgid "Descriptors are invoked by the :meth:`__getattribute__` method."
msgstr "修飾器是透過 :meth:`__getattribute__` 方法調用的。"

#: ../../howto/descriptor.rst:813
msgid ""
"Classes inherit this machinery from :class:`object`, :class:`type`, or :func:"
"`super`."
msgstr "類別從 :class:`object`、:class:`type` 或 :func:`super` 繼承此機制。"

#: ../../howto/descriptor.rst:816
msgid ""
"Overriding :meth:`__getattribute__` prevents automatic descriptor calls "
"because all the descriptor logic is in that method."
msgstr ""

#: ../../howto/descriptor.rst:819
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`.  The first includes the instance and may "
"include the class.  The second puts in ``None`` for the instance and always "
"includes the class."
msgstr ""

#: ../../howto/descriptor.rst:824
msgid "Data descriptors always override instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:826
msgid "Non-data descriptors may be overridden by instance dictionaries."
msgstr ""

#: ../../howto/descriptor.rst:830
msgid "Automatic name notification"
msgstr ""

#: ../../howto/descriptor.rst:832
msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"and the *name* is the class variable the descriptor was assigned to."
msgstr ""

#: ../../howto/descriptor.rst:839
msgid ""
"The implementation details are in :c:func:`type_new()` and :c:func:"
"`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:842
msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: ../../howto/descriptor.rst:848
msgid "ORM example"
msgstr "ORM 範例"

#: ../../howto/descriptor.rst:850
msgid ""
"The following code is a simplified skeleton showing how data descriptors "
"could be used to implement an `object relational mapping <https://en."
"wikipedia.org/wiki/Object%E2%80%93relational_mapping>`_."
msgstr ""

#: ../../howto/descriptor.rst:854
msgid ""
"The essential idea is that the data is stored in an external database.  The "
"Python instances only hold keys to the database's tables.  Descriptors take "
"care of lookups or updates:"
msgstr ""

#: ../../howto/descriptor.rst:873
msgid ""
"We can use the :class:`Field` class to define `models <https://en.wikipedia."
"org/wiki/Database_model>`_ that describe the schema for each table in a "
"database:"
msgstr ""

#: ../../howto/descriptor.rst:898
msgid "To use the models, first connect to the database::"
msgstr ""

#: ../../howto/descriptor.rst:903
msgid ""
"An interactive session shows how data is retrieved from the database and how "
"it can be updated:"
msgstr ""

#: ../../howto/descriptor.rst:948
msgid "Pure Python Equivalents"
msgstr ""

#: ../../howto/descriptor.rst:950
msgid ""
"The descriptor protocol is simple and offers exciting possibilities.  "
"Several use cases are so common that they have been prepackaged into built-"
"in tools. Properties, bound methods, static methods, class methods, and \\_"
"\\_slots\\_\\_ are all based on the descriptor protocol."
msgstr ""

#: ../../howto/descriptor.rst:957
msgid "Properties"
msgstr ""

#: ../../howto/descriptor.rst:959
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers a function call upon access to an attribute.  Its signature "
"is::"
msgstr ""

#: ../../howto/descriptor.rst:964
msgid ""
"The documentation shows a typical use to define a managed attribute ``x``:"
msgstr ""

#: ../../howto/descriptor.rst:988
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent:"
msgstr ""

#: ../../howto/descriptor.rst:1091
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""

#: ../../howto/descriptor.rst:1095
msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor:"
msgstr ""

#: ../../howto/descriptor.rst:1112
msgid ""
"Either the built-in :func:`property` or our :func:`Property` equivalent "
"would work in this example."
msgstr ""

#: ../../howto/descriptor.rst:1117
msgid "Functions and methods"
msgstr ""

#: ../../howto/descriptor.rst:1119
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""

#: ../../howto/descriptor.rst:1122
msgid ""
"Functions stored in class dictionaries get turned into methods when invoked. "
"Methods only differ from regular functions in that the object instance is "
"prepended to the other arguments.  By convention, the instance is called "
"*self* but could be called *this* or any other variable name."
msgstr ""

#: ../../howto/descriptor.rst:1127
msgid ""
"Methods can be created manually with :class:`types.MethodType` which is "
"roughly equivalent to:"
msgstr ""

#: ../../howto/descriptor.rst:1144
msgid ""
"To support automatic creation of methods, functions include the :meth:"
"`__get__` method for binding methods during attribute access.  This means "
"that functions are non-data descriptors that return bound methods during "
"dotted lookup from an instance.  Here's how it works:"
msgstr ""

#: ../../howto/descriptor.rst:1160
msgid ""
"Running the following class in the interpreter shows how the function "
"descriptor works in practice:"
msgstr ""

#: ../../howto/descriptor.rst:1169
msgid ""
"The function has a :term:`qualified name` attribute to support introspection:"
msgstr ""

#: ../../howto/descriptor.rst:1176
msgid ""
"Accessing the function through the class dictionary does not invoke :meth:"
"`__get__`.  Instead, it just returns the underlying function object::"
msgstr ""

#: ../../howto/descriptor.rst:1182
msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

#: ../../howto/descriptor.rst:1188
msgid ""
"The interesting behavior occurs during dotted access from an instance.  The "
"dotted lookup calls :meth:`__get__` which returns a bound method object::"
msgstr ""

#: ../../howto/descriptor.rst:1195
msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

#: ../../howto/descriptor.rst:1204
msgid ""
"If you have ever wondered where *self* comes from in regular methods or "
"where *cls* comes from in class methods, this is it!"
msgstr ""

#: ../../howto/descriptor.rst:1209
msgid "Kinds of methods"
msgstr ""

#: ../../howto/descriptor.rst:1211
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr ""

#: ../../howto/descriptor.rst:1214
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling ``cls."
"f(*args)`` becomes ``f(*args)``."
msgstr ""

#: ../../howto/descriptor.rst:1219
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr ""

#: ../../howto/descriptor.rst:1222
msgid "Transformation"
msgstr ""

#: ../../howto/descriptor.rst:1222
msgid "Called from an object"
msgstr "自物件呼叫"

#: ../../howto/descriptor.rst:1222
msgid "Called from a class"
msgstr "自類別呼叫"

#: ../../howto/descriptor.rst:1225
msgid "function"
msgstr "函式"

#: ../../howto/descriptor.rst:1225
msgid "f(obj, \\*args)"
msgstr "f(obj, \\*args)"

#: ../../howto/descriptor.rst:1225 ../../howto/descriptor.rst:1227
msgid "f(\\*args)"
msgstr "f(\\*args)"

#: ../../howto/descriptor.rst:1227
msgid "staticmethod"
msgstr "靜態類別（staticmethod）"

#: ../../howto/descriptor.rst:1229
msgid "classmethod"
msgstr "類別方法（classmethod）"

#: ../../howto/descriptor.rst:1229
msgid "f(type(obj), \\*args)"
msgstr "f(type(obj), \\*args)"

#: ../../howto/descriptor.rst:1229
msgid "f(cls, \\*args)"
msgstr "f(cls, \\*args)"

#: ../../howto/descriptor.rst:1234
msgid "Static methods"
msgstr "靜態方法"

#: ../../howto/descriptor.rst:1236
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into ``object."
"__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, \"f\")``. As a "
"result, the function becomes identically accessible from either an object or "
"a class."
msgstr ""
"靜態方法會不做任何改變地回傳底層函式。呼叫 ``c.f`` 或 ``C.f`` 等價於直接查找 "
"``object.__getattribute__(c, \"f\")`` 或 ``object.__getattribute__(C, \"f\""
")`` 。因此，函式可以從物件或類別完全相同地存取。"

#: ../../howto/descriptor.rst:1242
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr "靜態方法的好範例是不需要參考 ``self`` 變數的方法。"

#: ../../howto/descriptor.rst:1245
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion "
"routine that comes up in statistical work but does not directly depend on a "
"particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""
"比方說，一個統計套件可能會包含一個用於實驗數據的容器類別。該類別提供了常規方"
"法來計算平均值、中位數和其他依賴於數據的描述性統計值。然而，可能會存在一些有"
"用的函數，它們在概念上相關，但不依賴於資料。例如，``erf(x)`` 是在統計工作中常"
"用的轉換例行事務，但並不直接依賴於特定的資料集。它可以從物件或類中調用：``s."
"erf(1.5) --> .9332`` 或 ``Sample.erf(1.5) --> .9332``。"

#: ../../howto/descriptor.rst:1254
msgid ""
"Since static methods return the underlying function with no changes, the "
"example calls are unexciting:"
msgstr "由於靜態方法不做任何更改就回傳底層函式，所以這些範例呼叫令人感到無趣："

#: ../../howto/descriptor.rst:1271
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`staticmethod` would look like this:"
msgstr "使用非資料修飾器協議，一個純 Python 版本的 :func:`staticmethod` "
"看起來像這樣："

#: ../../howto/descriptor.rst:1310
msgid "Class methods"
msgstr "類別方法"

#: ../../howto/descriptor.rst:1312
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class:"
msgstr "不同於靜態方法，類別方法在調用函數前會在參數列表前加上類別參考。 "
"無論調用者是物件還是類，這個格式都是一樣的："

#: ../../howto/descriptor.rst:1330
msgid ""
"This behavior is useful whenever the method only needs to have a class "
"reference and does not rely on data stored in a specific instance.  One use "
"for class methods is to create alternate class constructors.  For example, "
"the classmethod :func:`dict.fromkeys` creates a new dictionary from a list "
"of keys.  The pure Python equivalent is:"
msgstr ""
"這種行為在方法只需要類別參考並且不依賴於特定實例中存儲的資料時非常有用。使用"
"類別方法的一個用途是建立替代的類建造函數。例如，classmethod :func:`dict."
"fromkeys` 從鍵列表創建一個新的字典。純 Python 等效於："

#: ../../howto/descriptor.rst:1347
msgid "Now a new dictionary of unique keys can be constructed like this:"
msgstr "現在可以這樣建立一個唯一鍵的新字典："

#: ../../howto/descriptor.rst:1357
msgid ""
"Using the non-data descriptor protocol, a pure Python version of :func:"
"`classmethod` would look like this:"
msgstr "使用資料修飾器協議，:func:`classmethod` 的純 Python 版本如下："

#: ../../howto/descriptor.rst:1408
msgid ""
"The code path for ``hasattr(type(self.f), '__get__')`` was added in Python "
"3.9 and makes it possible for :func:`classmethod` to support chained "
"decorators.  For example, a classmethod and property could be chained "
"together.  In Python 3.11, this functionality was deprecated."
msgstr ""
"Python 3.9 新增了對於 ``hasattr(type(self.f), '__get__')`` 這條路徑的支援，"
"進而使 :func:`classmethod` 能夠支援鏈式裝飾器（Chained "
"Decorator）。例如，可以將類別方法和屬性串連在一起。然而在 Python 3.11 "
"中，此功能已被棄用。"

#: ../../howto/descriptor.rst:1428
msgid "Member objects and __slots__"
msgstr "成員物件和 __slots__"

#: ../../howto/descriptor.rst:1430
msgid ""
"When a class defines ``__slots__``, it replaces instance dictionaries with a "
"fixed-length array of slot values.  From a user point of view that has "
"several effects:"
msgstr "當一個類別定義了 ``__slots__``，它會將實例字典替換成一個固定長度的 slot "
"值陣列。從使用者的角度來看，這會有幾個影響："

#: ../../howto/descriptor.rst:1434
msgid ""
"1. Provides immediate detection of bugs due to misspelled attribute "
"assignments.  Only attribute names specified in ``__slots__`` are allowed:"
msgstr "1. 提供立即偵測因屬性名稱錯誤所導致的錯誤。只有在 ``__slots__`` "
"中指定的屬性名稱才是被允許的："

#: ../../howto/descriptor.rst:1450
msgid ""
"2. Helps create immutable objects where descriptors manage access to private "
"attributes stored in ``__slots__``:"
msgstr "2. 使用修飾器管理 ``__slots__`` 中存儲的私有屬性，有助於建立不可變物件："

#: ../../howto/descriptor.rst:1485
msgid ""
"3. Saves memory.  On a 64-bit Linux build, an instance with two attributes "
"takes 48 bytes with ``__slots__`` and 152 bytes without.  This `flyweight "
"design pattern <https://en.wikipedia.org/wiki/Flyweight_pattern>`_ likely "
"only matters when a large number of instances are going to be created."
msgstr ""
"3. 使用 `__slots__` 的情況下可以節省記憶體，64 位元的 Linux "
"版本中，一個有兩個屬性的實例，使用 `__slots__` 時佔用 48 個位元組，"
"沒有使用時佔用 152 個位元組。這個 `flyweight design pattern <https://en."
"wikipedia.org/wiki/Flyweight_pattern>`_ "
"，只有在需要建立大量實例的情況下才有意義。"

#: ../../howto/descriptor.rst:1490
msgid ""
"4. Improves speed.  Reading instance variables is 35% faster with "
"``__slots__`` (as measured with Python 3.10 on an Apple M1 processor)."
msgstr ""
"4. 提升速度。在 Apple M1 處理器上使用 Python 3.10 測試，使用 ``__slots__`` "
"讀取實例變數可提升 35% 的速度。"

#: ../../howto/descriptor.rst:1493
msgid ""
"5. Blocks tools like :func:`functools.cached_property` which require an "
"instance dictionary to function correctly:"
msgstr "5. 阻斷對於像 :func:`functools.cached_property` "
"這樣需要實例字典才能正確運作的工具："

#: ../../howto/descriptor.rst:1515
msgid ""
"It is not possible to create an exact drop-in pure Python version of "
"``__slots__`` because it requires direct access to C structures and control "
"over object memory allocation.  However, we can build a mostly faithful "
"simulation where the actual C structure for slots is emulated by a private "
"``_slotvalues`` list.  Reads and writes to that private structure are "
"managed by member descriptors:"
msgstr ""
"無法建立完全相同的純 Python 版本的 ``__slots__``，因為它需要直接存取 C "
"結構和控制物件記憶體配置。但是，我們可以建立一個大致忠實的模擬，其中私有的 "
"`_slotvalues` 列表模擬了實際的 C 結構。對該私有結構的讀寫由成員修飾器管理："

#: ../../howto/descriptor.rst:1560
msgid ""
"The :meth:`type.__new__` method takes care of adding member objects to class "
"variables:"
msgstr ""

#: ../../howto/descriptor.rst:1576
msgid ""
"The :meth:`object.__new__` method takes care of creating instances that have "
"slots instead of an instance dictionary.  Here is a rough simulation in pure "
"Python:"
msgstr ""

#: ../../howto/descriptor.rst:1611
msgid ""
"To use the simulation in a real class, just inherit from :class:`Object` and "
"set the :term:`metaclass` to :class:`Type`:"
msgstr ""

#: ../../howto/descriptor.rst:1625
msgid ""
"At this point, the metaclass has loaded member objects for *x* and *y*::"
msgstr ""

#: ../../howto/descriptor.rst:1646
msgid ""
"When instances are created, they have a ``slot_values`` list where the "
"attributes are stored:"
msgstr ""

#: ../../howto/descriptor.rst:1658
msgid "Misspelled or unassigned attributes will raise an exception:"
msgstr "拼字錯誤或未指定的屬性會引發例外："
