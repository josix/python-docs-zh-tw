# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-12 20:01+0000\n"
"PO-Revision-Date: 2023-03-20 19:30+0000\n"
"Last-Translator: CTHua <illiew2470+pythonTW@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: enum\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 4.16.4\n"

#: ../../howto/enum.rst:3
msgid "Enum HOWTO"
msgstr "Enum（枚舉）教學"

#: ../../howto/enum.rst:9
#, fuzzy
msgid ""
"An :class:`Enum` is a set of symbolic names bound to unique values.  They "
"are similar to global variables, but they offer a more useful :func:"
"`repr()`, grouping, type-safety, and a few other features."
msgstr ""
":class:`Enum` 是一組綁定唯一值的符號名稱集合。「Enum」與全域變數類似，"
"但提供更有用的 :func:`repr()`，分組功能、型別安全以及其他若干特殊功能。"

#: ../../howto/enum.rst:13
#, fuzzy
msgid ""
"They are most useful when you have a variable that can take one of a limited "
"selection of values.  For example, the days of the week::"
msgstr "當你有一個變數可以取值為限定的一部分時，最有用。例如：一周中的日期:"

#: ../../howto/enum.rst:26
#, fuzzy
msgid "Or perhaps the RGB primary colors::"
msgstr "或許是 RGB 基本色彩："

#: ../../howto/enum.rst:34
#, fuzzy
msgid ""
"As you can see, creating an :class:`Enum` is as simple as writing a class "
"that inherits from :class:`Enum` itself."
msgstr "你可以看出來，創建一個:class:`Enum`就像編寫一個從自身繼承的:class:`Enum`類別"
"。"

#: ../../howto/enum.rst:37
#, fuzzy
msgid "Case of Enum Members"
msgstr "列舉型別成員的情況"

#: ../../howto/enum.rst:39
#, fuzzy
msgid ""
"Because Enums are used to represent constants we recommend using UPPER_CASE "
"names for members, and will be using that style in our examples."
msgstr "由於枚舉（Enums）用於表示常數，我們建議使用大寫命名法（UPPER_CASE），以此命名"
"成員。在我們的範例中也會採用這種風格。"

#: ../../howto/enum.rst:42
#, fuzzy
msgid ""
"Depending on the nature of the enum a member's value may or may not be "
"important, but either way that value can be used to get the corresponding "
"member::"
msgstr "根據 enum 的性質，成員的值可能很重要，也可能不太重要，但無論如何這個值都可以"
"用來取得對應的成員。"

#: ../../howto/enum.rst:49
#, fuzzy
msgid ""
"As you can see, the ``repr()`` of a member shows the enum name, the member "
"name, and the value.  The ``str()`` of a member shows only the enum name and "
"member name::"
msgstr "你可以看到，一個成員的 ``repr()`` 會顯示枚舉名稱、成員名稱和值。而該成員的 "
"``str()`` 僅會顯示枚舉名稱和成員名稱："

#: ../../howto/enum.rst:56
#, fuzzy
msgid "The *type* of an enumeration member is the enum it belongs to::"
msgstr "列舉成員的*型別*即其所屬的列舉：注意：保留rst格式符號"

#: ../../howto/enum.rst:63
#, fuzzy
msgid "Enum members have an attribute that contains just their :attr:`name`::"
msgstr "列舉成員具有一個屬性，其中僅包含它們的 :attr:`name`（名稱）："

#: ../../howto/enum.rst:68
#, fuzzy
msgid "Likewise, they have an attribute for their :attr:`value`::"
msgstr "同樣地，它們具有一個屬性用於它們的 :attr:`value` 值："

#: ../../howto/enum.rst:74
#, fuzzy
msgid ""
"Unlike many languages that treat enumerations solely as name/value pairs, "
"Python Enums can have behavior added.  For example, :class:`datetime.date` "
"has two methods for returning the weekday: :meth:`weekday` and :meth:"
"`isoweekday`. The difference is that one of them counts from 0-6 and the "
"other from 1-7. Rather than keep track of that ourselves we can add a method "
"to the :class:`Weekday` enum to extract the day from the :class:`date` "
"instance and return the matching enum member::"
msgstr ""
"與其他把列舉視為純名稱/值對的語言不同，Python 的 Enums "
"可添加行為。例如，:class:`datetime.date` "
"有兩個回傳週幾星期幾的方法：:meth:`weekday` 和 :meth:`isoweekday`。差異在於一"
"個從0-6算起，另一個從1-7算起。我們可以新增一個方法到:class:`Weekday` 列舉中 "
"，以提取日期實例的天數並回傳相應的枚舉成員來追蹤它自 己 。"

#: ../../howto/enum.rst:86
#, fuzzy
msgid "The complete :class:`Weekday` enum now looks like this::"
msgstr ":class:`Weekday` 的完整列舉現在看起來像是這樣的："

#: ../../howto/enum.rst:101
#, fuzzy
msgid "Now we can find out what today is!  Observe::"
msgstr "現在我們可以找出今天是哪一天了！觀察："

#: ../../howto/enum.rst:107
#, fuzzy
msgid ""
"Of course, if you're reading this on some other day, you'll see that day "
"instead."
msgstr "當然，如果你是在其他日期閱讀這篇文章，你會看到該天的日期。"

#: ../../howto/enum.rst:109
#, fuzzy
msgid ""
"This :class:`Weekday` enum is great if our variable only needs one day, but "
"what if we need several?  Maybe we're writing a function to plot chores "
"during a week, and don't want to use a :class:`list` -- we could use a "
"different type of :class:`Enum`::"
msgstr ""
"這個 :class:`Weekday` 列舉型別對於只需要一天的變數很方便，但如果我們需要多天"
"呢？也許我們正在撰寫一個函式，要在整週繪製家務事項，而不想使用 :class:`list` "
"-- 我們可以使用另一種 :class:`Enum` 型別:"

#: ../../howto/enum.rst:124
#, fuzzy
msgid ""
"We've changed two things: we're inherited from :class:`Flag`, and the values "
"are all powers of 2."
msgstr "我們做了兩件事：一是繼承 `Flag` 類別，二是所有的值都是2的乘方。"

#: ../../howto/enum.rst:127
#, fuzzy
msgid ""
"Just like the original :class:`Weekday` enum above, we can have a single "
"selection::"
msgstr "就像原始的 :class:`Weekday` 枚舉一樣，我們可以進行單一選擇："

#: ../../howto/enum.rst:133
#, fuzzy
msgid ""
"But :class:`Flag` also allows us to combine several members into a single "
"variable::"
msgstr "但是 :class:`Flag` 也允許我們將數個成員結合為一個變數::"

#: ../../howto/enum.rst:140
#, fuzzy
msgid "You can even iterate over a :class:`Flag` variable::"
msgstr "你甚至可以遍歷一個 :class:`Flag` 變數:"

#: ../../howto/enum.rst:147
#, fuzzy
msgid "Okay, let's get some chores set up::"
msgstr "好的，讓我們進行一些必要設定："

#: ../../howto/enum.rst:155
#, fuzzy
msgid "And a function to display the chores for a given day::"
msgstr "以下是給定一個日期的家務事項顯示函式："

#: ../../howto/enum.rst:164
#, fuzzy
msgid ""
"In cases where the actual values of the members do not matter, you can save "
"yourself some work and use :func:`auto()` for the values::"
msgstr "如果成員的實際值不重要，您可以省去一些工作，並使用 :func:`auto()` 替代數值::"

#: ../../howto/enum.rst:183
#, fuzzy
msgid "Programmatic access to enumeration members and their attributes"
msgstr "可以用程式存取列舉值及其屬性"

#: ../../howto/enum.rst:185
#, fuzzy
msgid ""
"Sometimes it's useful to access members in enumerations programmatically (i."
"e. situations where ``Color.RED`` won't do because the exact color is not "
"known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"有時候，以程式方式存取列舉中的成員是很有用且必要的（例如在編寫程式時無法確定"
"正確顏色，因此使用 ``Color.RED`` 就不合適）。在這種情況下，可以利用 ``Enum`` "
"來存取："

#: ../../howto/enum.rst:194
#, fuzzy
msgid "If you want to access enum members by *name*, use item access::"
msgstr "如果你想要透過 *名稱* 存取枚舉成員，請使用項目存取："

#: ../../howto/enum.rst:201
#, fuzzy
msgid "If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr "如果你有一個列舉型別的成員，並需要獲取其 :attr:`name` 或 :attr:`value`屬性："

#: ../../howto/enum.rst:211
#, fuzzy
msgid "Duplicating enum members and values"
msgstr "複製列舉成員和值"

#: ../../howto/enum.rst:213
#, fuzzy
msgid "Having two enum members with the same name is invalid::"
msgstr "擁有兩個同名的列舉成員是無效的："

#: ../../howto/enum.rst:223
#, fuzzy
msgid ""
"However, an enum member can have other names associated with it.  Given two "
"entries ``A`` and ``B`` with the same value (and ``A`` defined first), ``B`` "
"is an alias for the member ``A``.  By-value lookup of the value of ``A`` "
"will return the member ``A``.  By-name lookup of ``A`` will return the "
"member ``A``. By-name lookup of ``B`` will also return the member ``A``::"
msgstr ""
"然而，列舉成員可以有其它名稱與之相關聯。假設有兩個項目 ``A`` 與 ``B``，"
"且其值相同 (且``A``定義在前面)， 則 ``B`` 是成員 ``A`` 的別名。通過取得 \"by-"
"value\"屬性來查找 \"A\"的值會返回成員\"A\"； 通過 \"by-name\"方式查找\"A"
"\"也會返回成員\"A\"；通過 \"by-name\" 方式查找\"B\"，同樣也會返回 成員“A” ："

#: ../../howto/enum.rst:244
#, fuzzy
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr "嘗試建立一個與已定義的屬性（另一個成員、方法等）同名的成員，"
"或者嘗試建立一個與成 員同名的屬性是不被允許的。"

#: ../../howto/enum.rst:250
#, fuzzy
msgid "Ensuring unique enumeration values"
msgstr "確保列舉值唯一"

#: ../../howto/enum.rst:252
#, fuzzy
msgid ""
"By default, enumerations allow multiple names as aliases for the same value. "
"When this behavior isn't desired, you can use the :func:`unique` decorator::"
msgstr "預設情況下，枚舉型別允許使用多個名稱作為相同值的別名。當不希望這種行為時，"
"可以使用 :func:`unique` 裝飾器："

#: ../../howto/enum.rst:269
#, fuzzy
msgid "Using automatic values"
msgstr "使用自動產生的值"

#: ../../howto/enum.rst:271
#, fuzzy
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr "如果精確值不重要，可以使用:class:`auto`："

#: ../../howto/enum.rst:282
#, fuzzy
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr "這段文字的翻譯如下：值是由 :func:`_generate_next_value_` 決定的，可以被覆寫："

#: ../../howto/enum.rst:300
#, fuzzy
msgid ""
"The :meth:`_generate_next_value_` method must be defined before any members."
msgstr "在任何成員之前都必須先定義 :meth:`_generate_next_value_` 方法。"

#: ../../howto/enum.rst:303
#, fuzzy
msgid "Iteration"
msgstr "迭代"

#: ../../howto/enum.rst:305
#, fuzzy
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr "逐一列舉枚舉型別的成員時不提供其別名::"

#: ../../howto/enum.rst:312
#, fuzzy
msgid ""
"Note that the aliases ``Shape.ALIAS_FOR_SQUARE`` and ``Weekday.WEEKEND`` "
"aren't shown."
msgstr "注意：別名 ``Shape.ALIAS_FOR_SQUARE`` 和 ``Weekday.WEEKEND`` 沒有顯示。"

#: ../../howto/enum.rst:314
#, fuzzy
msgid ""
"The special attribute ``__members__`` is a read-only ordered mapping of "
"names to members.  It includes all names defined in the enumeration, "
"including the aliases::"
msgstr "特殊屬性 ``__members__`` 是一個只能讀取的有序映射，從名稱到成員。它包括了枚舉"
"中定義的所有名稱，包括別名。"

#: ../../howto/enum.rst:326
#, fuzzy
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr "``__members__`` 屬性可用於對枚舉成員進行詳細的編程訪問。例如，查找所有別名："

#: ../../howto/enum.rst:334
#, fuzzy
msgid ""
"Aliases for flags include values with multiple flags set, such as ``3``, and "
"no flags set, i.e. ``0``."
msgstr "輸入參數的別名可以使用在有多個指令旗標時，例如 "
"`3`；也可用於無任何指令旗標時，即 `0`。"

#: ../../howto/enum.rst:339
#, fuzzy
msgid "Comparisons"
msgstr "比較"

#: ../../howto/enum.rst:341
#, fuzzy
msgid "Enumeration members are compared by identity::"
msgstr "列舉成員按身份(identity)進行比較::"

#: ../../howto/enum.rst:350
#, fuzzy
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr "不支援列舉值之間的排序比較。列舉成員並非整數（但下方可參考 `IntEnum`_）："

#: ../../howto/enum.rst:358
#, fuzzy
msgid "Equality comparisons are defined though::"
msgstr "等式比較是透過以下定義："

#: ../../howto/enum.rst:367
#, fuzzy
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr "對不包含列舉值的比較總是會得到「不相等」（再一次地，:class:`IntEnum` "
"是有特別定義的行為，詳情見下文）："

#: ../../howto/enum.rst:376
#, fuzzy
msgid "Allowed members and attributes of enumerations"
msgstr "列舉型別中的允許成員和屬性"

#: ../../howto/enum.rst:378
#, fuzzy
msgid ""
"Most of the examples above use integers for enumeration values.  Using "
"integers is short and handy (and provided by default by the `Functional "
"API`_), but not strictly enforced.  In the vast majority of use-cases, one "
"doesn't care what the actual value of an enumeration is.  But if the value "
"*is* important, enumerations can have arbitrary values."
msgstr ""
"大部分上面的範例都使用整數來作為枚舉值。使用整數即方便又快速（而且Functional "
"API預設也會支援），但不是強制性的做法。在極大多數情況下，一個資料列舉實際所代"
"表的值不重要。但如果該值很重要，您仍可以隨意指定任何需求所涵蓋到之枚舉值。"

#: ../../howto/enum.rst:384
#, fuzzy
msgid ""
"Enumerations are Python classes, and can have methods and special methods as "
"usual.  If we have this enumeration::"
msgstr "列舉是 Python 中的一種類別，可像慣例中的其他類別一樣，具有方法和特殊方法。若"
"我們定義以下列舉："

#: ../../howto/enum.rst:404
#, fuzzy
msgid "Then::"
msgstr "接著是："

#: ../../howto/enum.rst:413
#, fuzzy
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, :meth:"
"`__add__`, etc.), descriptors (methods are also descriptors), and variable "
"names listed in :attr:`_ignore_`."
msgstr ""
"下面是翻譯後的文字：定義枚舉（Enum）時，需注意以下規則："
"命名以一個底線開頭和結尾的名稱保留給 enum ，不能使用；除了特殊方法（例如: "
":meth:`__str__`, :meth:`__add__` 等）、描述符 (方法也是描述符) 以及在 "
":attr:`_ignore_` "
"中列出的變數名之外，定義於枚舉內部的所有屬性都會成為此枚舉類別的成員。"

#: ../../howto/enum.rst:420
#, fuzzy
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__` "
"then any value(s) given to the enum member will be passed into those "
"methods. See `Planet`_ for an example."
msgstr ""
"請注意：如果您的枚舉定義了 ``__new__`` 和/或 ``__init__`` "
"方法，則任何指定給該枚舉成員的值都將傳遞到這些方法中。 請參考 `Planet`_ "
"的範例。"

#: ../../howto/enum.rst:426
#, fuzzy
msgid "Restricted Enum subclassing"
msgstr "受限枚舉子類別化"

#: ../../howto/enum.rst:428
#, fuzzy
msgid ""
"A new :class:`Enum` class must have one base enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"一個新的 :class:`Enum` "
"類別必須擁有一個基礎列舉(enum)類別、不超過一種具體的資料型別(data type)，"
"以及所需的任意數量使用 :class:`object` 為基礎(mixin) "
"的混合類別。這些基礎類別(base classes)之間的順序為:"

#: ../../howto/enum.rst:435
#, fuzzy
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not "
"define any members.  So this is forbidden::"
msgstr "同時，只有在列舉型別未定義任何成員時才允許子類化enumeration。 "
"因此，這是被禁止的："

#: ../../howto/enum.rst:445
#, fuzzy
msgid "But this is allowed::"
msgstr "但這是允許的："

#: ../../howto/enum.rst:456
#, fuzzy
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"允許定義成員的列舉型別可以被繼承，但這也會違反一些重要的類型和實例不變數。然"
"而，在一組列舉中，允許共享某些通用的行為是有道理的。(例如參考 `OrderedEnum`_ "
"之範例) 。"

#: ../../howto/enum.rst:463
#, fuzzy
msgid "Pickling"
msgstr ""
"Pickling又稱「序列化」，是指將 Python 對象轉為二進位串（byte "
"stream）的過程，在物件長期保存、傳送或共享時非常有用。反向操作也可以通過 "
"pickling 實現，即把資料從二進位串中還原回來。Python 已經提供了官方支援的 \\`"
"\\`pickle\\`\\` 模組，以不同方式支援所有 Python "
"的內置物件類型與部分第三方擴展。若要 pickle "
"自定義的類別、函式甚至整個模組等，只需要在對應物件上實作 \\_\\_pickle\\_\\_()"
" 函數即可。使用好 pickle 往往意味著可以減少許多繁雜手續且增加更多效能！"

#: ../../howto/enum.rst:465
#, fuzzy
msgid "Enumerations can be pickled and unpickled::"
msgstr "列舉型別可以被 pickle 和 unpickle。::"

#: ../../howto/enum.rst:472
#, fuzzy
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr ""
"通常對於 pickling 有一些限制：可 pickle 的列舉型別必須在模組的最上層定義，"
"因為反序列化需要它們從該模組中 importable。"

#: ../../howto/enum.rst:478
#, fuzzy
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr "從 pickle 協議版本 4 開始，嵌套在其他類別內的 enums "
"可以方便地進行序列化（pickle）。"

#: ../../howto/enum.rst:481
#, fuzzy
msgid ""
"It is possible to modify how enum members are pickled/unpickled by defining :"
"meth:`__reduce_ex__` in the enumeration class."
msgstr "可以透過在列舉類別中定義 :meth:`__reduce_ex__` 來修改枚舉成員的取捨（pickled/"
"unpickled）方式。"

#: ../../howto/enum.rst:486
#, fuzzy
msgid "Functional API"
msgstr "功能性API"

#: ../../howto/enum.rst:488
#, fuzzy
msgid ""
"The :class:`Enum` class is callable, providing the following functional API::"
msgstr ":class:`Enum` 類別是可呼叫的，提供以下函數式 API："

#: ../../howto/enum.rst:498
#, fuzzy
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"這個 API 的語義類似 :class:`~collections.namedtuple` 。 叫用 :class:`Enum` "
"的第一個引數是列舉型別的名稱。"

#: ../../howto/enum.rst:501
#, fuzzy
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of 2-"
"tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"第二個參數是列舉成員名稱的「來源」。它可以是由空格分隔的字串、一系列名稱、"
"具有鍵值對的 2 元序列，或者映射(例如字典)，其中包含了名稱和相應值。最後兩個選"
"項使得能夠將任意值指定給枚舉；其他則自動分配從 1 開始增加的整數 (使用 "
"``start`` 參數可指定不同的起始值) 。回傳一個衍生自 :class:`Enum` "
"的新類別。換句話說，上面賦予 :class:`Animal` 的功能等價於："

#: ../../howto/enum.rst:517
#, fuzzy
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but by default enum members all "
"evaluate to ``True``."
msgstr ""
"預設將起始數字設為``1``而非``0``的原因是，布林運算中 ``0`` 為 ``False``, "
"但列舉型別中成員的預設值皆為真（evaluate to True）。"

#: ../../howto/enum.rst:521
#, fuzzy
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in a separate module, and also may not work on IronPython or "
"Jython). The solution is to specify the module name explicitly as follows::"
msgstr ""
"使用函數式 API 創建的枚舉型別可能會比較棘手，因為框架堆疊實現細節被用來嘗試找"
"出創建列舉型別的模組（例如，如果在另一個模組中使用實用工具函數則失敗，在 "
"IronPython 或 Jython "
"上也可能無法正常運作）。解決方案是明確指定模組名稱，如下所示：::        "
"import enum    class Color(enum.Enum):        RED = 1        GREEN = "
"2        BLUE = 3    # 將其存成二進位 Pickle 格式到開檔    with open("
"'file.pkl', 'wb') as f:       pickle.dump(Color, f)    # 從存储的 Pickle "
"文件那裡重获原始对象，并验证它确实还拥有相同类型和值    with open("
"'file.pkl', 'rb') as f:       LoadedColor = pickle.load(f)   assert "
"str(LoadedColor.RED) == 'Color.RED'"

#: ../../howto/enum.rst:531
#, fuzzy
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new "
"Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"如果未提供``module``，且Enum不能確定它是什麼，新的Enum成員將無法進行反序列化;"
" 為了讓錯誤更接近源頭， pickling會被禁用。"

#: ../../howto/enum.rst:535
#, fuzzy
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on :attr:"
"`~definition.__qualname__` being set to the location where pickle will be "
"able to find the class.  For example, if the class was made available in "
"class SomeData in the global scope::"
msgstr ""
"新的 pickle 協議 4 在某些情況下還依賴於 :attr:``~definition.__qualname__`` "
"設置為 pickle 能找到該類別位置的屬性。舉例而言，"
"如果在全域範圍內創建了一個名為 SomeData 的類別："

#: ../../howto/enum.rst:542
#, fuzzy
msgid "The complete signature is::"
msgstr "完整的函式簽名如下::"

#: ../../howto/enum.rst:0
#, fuzzy
msgid "value"
msgstr "值"

#: ../../howto/enum.rst:554
#, fuzzy
msgid "What the new enum class will record as its name."
msgstr "新的列舉（enum）類別將記錄其名稱。"

#: ../../howto/enum.rst:0
#, fuzzy
msgid "names"
msgstr "\"names\" 翻譯為 \"名稱\""

#: ../../howto/enum.rst:556
#, fuzzy
msgid ""
"The enum members.  This can be a whitespace- or comma-separated string "
"(values will start at 1 unless otherwise specified)::"
msgstr "列出 enum 的成員，這應為一個換行或以逗號分隔的字串（否則值將從 1 開始）。:"

#: ../../howto/enum.rst:561
#, fuzzy
msgid "or an iterator of names::"
msgstr "或一個名稱的迭代器："

#: ../../howto/enum.rst:565
#, fuzzy
msgid "or an iterator of (name, value) pairs::"
msgstr "或是一個 (名稱, 值) 配對的迭代器："

#: ../../howto/enum.rst:569
#, fuzzy
msgid "or a mapping::"
msgstr "或是一個對應關係："

#: ../../howto/enum.rst:0
#, fuzzy
msgid "module"
msgstr "模組"

#: ../../howto/enum.rst:573
#, fuzzy
msgid "name of module where new enum class can be found."
msgstr "可以在新列舉型別(enum class)所在的模組(module)中找到。"

#: ../../howto/enum.rst:0
#, fuzzy
msgid "qualname"
msgstr "qualname"

#: ../../howto/enum.rst:575
#, fuzzy
msgid "where in module new enum class can be found."
msgstr "這段文字翻譯如下：在哪裡可以找到「new」模組的列舉型別？"

#: ../../howto/enum.rst:0
#, fuzzy
msgid "type"
msgstr "型別"

#: ../../howto/enum.rst:577
#, fuzzy
msgid "type to mix in to new enum class."
msgstr "型別加入到新的列舉類別中。"

#: ../../howto/enum.rst:0
#, fuzzy
msgid "start"
msgstr "抱歉，請提供需要翻譯的原文本。"

#: ../../howto/enum.rst:579
#, fuzzy
msgid "number to start counting at if only names are passed in."
msgstr "如果只傳遞名稱，開始計數的數字是多少？"

#: ../../howto/enum.rst:581
#, fuzzy
msgid "The *start* parameter was added."
msgstr "新增了 *start* 參數。"

#: ../../howto/enum.rst:586
#, fuzzy
msgid "Derived Enumerations"
msgstr "衍生列舉"

#: ../../howto/enum.rst:589
#, fuzzy
msgid "IntEnum"
msgstr "IntEnum"

#: ../../howto/enum.rst:591
#, fuzzy
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of :"
"class:`int`.  Members of an :class:`IntEnum` can be compared to integers; by "
"extension, integer enumerations of different types can also be compared to "
"each other::"
msgstr ""
"提供的第一種:class:`Enum`變異體也是 :class:`int` 的子類別。:class:`IntEnum` "
"成員可與整數進行比較；由此，不同型別的整數列舉也可以相互比較："

#: ../../howto/enum.rst:612
#, fuzzy
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr "然而，它們仍無法與標準的 :class:`Enum` 型別相比較："

#: ../../howto/enum.rst:625
#, fuzzy
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr ":class:`IntEnum` 型別的值在其他方面表現得像整數："

#: ../../howto/enum.rst:636
#, fuzzy
msgid "StrEnum"
msgstr "`StrEnum`(字串列舉)"

#: ../../howto/enum.rst:638
#, fuzzy
msgid ""
"The second variation of :class:`Enum` that is provided is also a subclass "
"of :class:`str`.  Members of a :class:`StrEnum` can be compared to strings; "
"by extension, string enumerations of different types can also be compared to "
"each other."
msgstr ""
"提供第二種 :class:`Enum` 變型的子類別 :class:`StrEnum` 。 :class:`StrEnum` "
"的成員可與字串比較；因此，不同型態的字串列舉也可以彼此比較。"

#: ../../howto/enum.rst:647
#, fuzzy
msgid "IntFlag"
msgstr "整數旗標"

#: ../../howto/enum.rst:649
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be "
"combined using the bitwise operators (&, \\|, ^, ~) and the result is still "
"an :class:`IntFlag` member, if possible.  Like :class:`IntEnum`, :class:"
"`IntFlag` members are also integers and can be used wherever an :class:`int` "
"is used."
msgstr ""

#: ../../howto/enum.rst:657
#, fuzzy
msgid ""
"Any operation on an :class:`IntFlag` member besides the bit-wise operations "
"will lose the :class:`IntFlag` membership."
msgstr ""
"除了以位元運算的方式操作 :class:`IntFlag` 成員之外，"
"其他任何操作都會使這個成員失去屬於 :class:`IntFlag` 的身份。"

#: ../../howto/enum.rst:660
#, fuzzy
msgid ""
"Bit-wise operations that result in invalid :class:`IntFlag` values will lose "
"the :class:`IntFlag` membership.  See :class:`FlagBoundary` for details."
msgstr ""
"進行位元運算，若導致 :class:`IntFlag` 值無效，就會失去 :class:`IntFlag` "
"成員資格。詳細資訊請參考 :class:`FlagBoundary`。"

#: ../../howto/enum.rst:667
#, fuzzy
msgid "Sample :class:`IntFlag` class::"
msgstr "範例 :class:`IntFlag` 類別："

#: ../../howto/enum.rst:683
#, fuzzy
msgid "It is also possible to name the combinations::"
msgstr "可以將這些組合命名如下："

#: ../../howto/enum.rst:699
#, fuzzy
msgid ""
"Named combinations are considered aliases.  Aliases do not show up during "
"iteration, but can be returned from by-value lookups."
msgstr "已翻譯如下：    已命名的組合被視為別名。 \"Aliases\" "
"在迭代時不會顯示，但可以從按值查找中返回。"

#: ../../howto/enum.rst:704
#, fuzzy
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is :data:"
"`False`::"
msgstr ""
":class:`IntFlag` 和 :class:`Enum` "
"之間的另一個重要差異是，如果沒有設定標誌（值為0），那麼它的布林估值就是 "
":data:`False`:。"

#: ../../howto/enum.rst:712
#, fuzzy
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them (but may lose :class:`IntFlag` membership::"
msgstr ""
"由於 :class:`IntFlag` 成員也是 :class:`int` 的子類別，"
"因此它們可以與這些數值結合使用 (但其可能失去 :class:`IntFlag` 的成員身份) ："

#: ../../howto/enum.rst:723
#, fuzzy
msgid ""
"The negation operator, ``~``, always returns an :class:`IntFlag` member with "
"a positive value::"
msgstr "否定運算子 ``~`` ，總是會回傳一個 :class:`IntFlag` 成員，其值為正數。"

#: ../../howto/enum.rst:729
#, fuzzy
msgid ":class:`IntFlag` members can also be iterated over::"
msgstr ":class:`IntFlag` 的成員也可以進行迭代："

#: ../../howto/enum.rst:738
#, fuzzy
msgid "Flag"
msgstr "Flag"

#: ../../howto/enum.rst:740
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike :"
"class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""

#: ../../howto/enum.rst:749
#, fuzzy
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"類似 :class:`IntFlag` 的作法，如果一組 :class:`Flag` "
"類別的成員結果沒有任何旗標被設定，那麼布林式評估會是 :data:`False`。"

#: ../../howto/enum.rst:763
#, fuzzy
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, "
"8, ...), while combinations of flags will not::"
msgstr "個別的標誌(flag) 應該具有2的次方數值(1, 2, 4, 8...)，而標誌組合則不會:"

#: ../../howto/enum.rst:775
#, fuzzy
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr "將「無旗標設置」狀況命名並不會改變其布林值："

#: ../../howto/enum.rst:789
#, fuzzy
msgid ":class:`Flag` members can also be iterated over::"
msgstr ":class:`Flag` 成員也可以被迭代："

#: ../../howto/enum.rst:799
#, fuzzy
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic "
"promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and :class:"
"`IntFlag` should be used only in cases where :class:`Enum` and :class:`Flag` "
"will not do; for example, when integer constants are replaced with "
"enumerations, or for interoperability with other systems."
msgstr ""
"對於大部分的新代碼，強烈建議使用 :class:`Enum` 和 :class:`Flag`, 因為 "
":class:`IntEnum` 和 :class:`IntFlag` 違反了列舉型別的一些語意承諾(可比較整數"
"，因此也可適用於其他無關聯的列舉型別)。只有在不具備:class: `Enum`和:class: "
"`Flag` 的功能時方才應使用:class: ` IntEnum`與： class：``IntDate``；例如當整"
"數常量被替換成枚舉常量或需要互通性質上其他系統時。"

#: ../../howto/enum.rst:809
#, fuzzy
msgid "Others"
msgstr "抱歉，請提供需要翻譯的原始文字。"

#: ../../howto/enum.rst:811
#, fuzzy
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr "雖然 :class:`IntEnum` 是 :mod:`enum` 模組的一部分，但獨立實現也非常簡單："

#: ../../howto/enum.rst:817
#, fuzzy
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`FloatEnum` that mixes in :class:`float` instead of :class:"
"`int`."
msgstr ""
"這段文字的翻譯：這展示了多種派生列舉定義相似之處；例如，一個以浮點型別（``flo"
"at``）混入代替整數（``int``）的 ``FloatEnum`` 類別。"

#: ../../howto/enum.rst:820
#, fuzzy
msgid "Some rules:"
msgstr "一些規則："

#: ../../howto/enum.rst:822
#, fuzzy
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before :class:"
"`Enum` itself in the sequence of bases, as in the :class:`IntEnum` example "
"above."
msgstr ""
"當子類別化 :class:`Enum` 時，mix-in 的型別必須在 :class:`Enum` "
"本身之前出現於基礎序列中，就像先前舉的 :class:`IntEnum` 範例。"

#: ../../howto/enum.rst:825
#, fuzzy
msgid ""
"Mix-in types must be subclassable. For example, :class:`bool` and :class:"
"`range` are not subclassable and will throw an error during Enum creation if "
"used as the mix-in type."
msgstr ""
"混入類別必須是可被繼承的。例如 :class:`bool` 和 :class:`range` "
"並非可被子類化的，如果用於作為混入類型則會在建立枚舉時拋出錯誤訊息。"

#: ../../howto/enum.rst:828
#, fuzzy
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. :class:"
"`int` above.  This restriction does not apply to mix-ins which only add "
"methods and don't specify another type."
msgstr ""
"雖然:class:`Enum`可以包含任何型別的成員，但是一旦混合了其他型別，所有的成員都"
"必須具有該型別的值，例如上面提到的 :class:`int`。"
"這個限制不適用於僅添加方法而未指定另一種類型的 mixin。"

#: ../../howto/enum.rst:832
#, fuzzy
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr "當enum與其他型別混在一起時，即使他們是相等的且具有可比性，"
"該列舉成員本身和屬性 :attr:`value` *不會完全相同*。"

#: ../../howto/enum.rst:835
#, fuzzy
msgid ""
"%-style formatting:  ``%s`` and ``%r`` call the :class:`Enum` class's :meth:"
"`__str__` and :meth:`__repr__` respectively; other codes (such as ``%i`` or "
"``%h`` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""
"`%-style formatting:` 使用 `%s` 和 `%r`，分別會呼叫 `Enum` 類別的 `__str__()`"
" 和 `__repr__()`；其它格式符號（例如：IntEnum 的 `%i` 或 "
"`%h`）則將列舉成員視為其混入型別。"

#: ../../howto/enum.rst:838
#, fuzzy
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and :func:"
"`format` will use the enum's :meth:`__str__` method."
msgstr ""
":ref:`格式化字串 <f-strings>`、:meth:`str.format` 和 :func:`format` "
"會使用列舉型別的:meth:`__str__` 法。"

#: ../../howto/enum.rst:843
#, fuzzy
msgid ""
"Because :class:`IntEnum`, :class:`IntFlag`, and :class:`StrEnum` are "
"designed to be drop-in replacements for existing constants, their :meth:"
"`__str__` method has been reset to their data types :meth:`__str__` method."
msgstr ""
"由於:class:`IntEnum`、:class:`IntFlag`和 :class:`StrEnum`被設計為現有常數的即"
"插即用替代品，因此它們的:meth:`~__str__`方法已被重置為其資料類型的: "
"meth:`~__str__`方法。"

#: ../../howto/enum.rst:849
#, fuzzy
msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
msgstr "何時使用 :meth:`__new__` 而不是 :meth:`__init__`"

#: ../../howto/enum.rst:851
#, fuzzy
msgid ""
":meth:`__new__` must be used whenever you want to customize the actual value "
"of the :class:`Enum` member.  Any other modifications may go in either :meth:"
"`__new__` or :meth:`__init__`, with :meth:`__init__` being preferred."
msgstr ""
"當您想客製化 :class:`Enum` 成員的實際值時，必須使用:meth:`__new__`。"
"任何其他修改可以放在 :meth:`__new_` 或是 :meth:`__init__` 中，而優先選擇使用 "
":meth:`__init__ `進行修改。"

#: ../../howto/enum.rst:855
#, fuzzy
msgid ""
"For example, if you want to pass several items to the constructor, but only "
"want one of them to be the value::"
msgstr "例如， 如果您想傳遞幾個項目給構造函數，但只想其中一個是值："

#: ../../howto/enum.rst:882
#, fuzzy
msgid "Finer Points"
msgstr "微妙之處"

#: ../../howto/enum.rst:885
#, fuzzy
msgid "Supported ``__dunder__`` names"
msgstr "支援的 ``__dunder_ _`` 命名"

#: ../../howto/enum.rst:887
#, fuzzy
msgid ""
":attr:`__members__` is a read-only ordered mapping of ``member_name``:"
"``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` 是一個唯讀的有序映射，包含了 ``member_name``:``member`` "
"項目，在類別中才能使用。"

#: ../../howto/enum.rst:890
#, fuzzy
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately.  "
"Once all the members are created it is no longer used."
msgstr ""
"如果指定了 `:meth:`__new__`` 則必須建立並返回列舉成員；同時，為其 "
":attr:`_value_` "
"正確設值是一個非常好的選擇。當所有成員都建立完成後，此方法將不再使用。"

#: ../../howto/enum.rst:896
#, fuzzy
msgid "Supported ``_sunder_`` names"
msgstr "支援 ``_sunder_`` 命名"

#: ../../howto/enum.rst:898
#, fuzzy
msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- 成員的名稱"

#: ../../howto/enum.rst:899
#, fuzzy
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- 成員的值；可在 ``__new__`` 中設定/修改"

#: ../../howto/enum.rst:901
#, fuzzy
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr "``_missing_`` -- 當找不到值時使用的查詢函式；可以被覆寫"

#: ../../howto/enum.rst:903
#, fuzzy
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a :class:"
"`str`, that will not be transformed into members, and will be removed from "
"the final class"
msgstr ""
"``_ignore_`` -- 包含不需要作為類別成員的名稱的列表，必須是 :class:`list` 或 "
":class:`str` 類型，這些名稱將不會轉換為類別成員且將從最終所建立的類別中移除"

#: ../../howto/enum.rst:906
#, fuzzy
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr "``_order_`` -- 在 Python 2/3 "
"代碼中使用以確保成員順序一致（類屬性，在類創建期間刪除）"

#: ../../howto/enum.rst:908
#, fuzzy
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by :class:"
"`auto` to get an appropriate value for an enum member; may be overridden"
msgstr ""
"``_generate_next_value_`` 是供 `Functional API`_ 和 :class:`auto` "
"使用的方法，以便取得適當的列舉成員值；可被覆寫。"

#: ../../howto/enum.rst:914
#, fuzzy
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr "對於標準的 :class:`Enum` 類別，下一個選擇的值是最後看到的值加一。"

#: ../../howto/enum.rst:917
#, fuzzy
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr "對於 :class:`Flag` "
"類別，下一個被選擇的值是接下來最高的二次冪，無論上一個值是否見過。"

#: ../../howto/enum.rst:920
#, fuzzy
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``、``_order_`` 和 ``_generate_next_value_``。"

#: ../../howto/enum.rst:921
#, fuzzy
msgid "``_ignore_``"
msgstr "抱歉，我無法翻譯 ``_ignore_`` 的指令，請提供需要翻譯的文字。"

#: ../../howto/enum.rst:923
#, fuzzy
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"為了協助保持 Python 2 / Python 3 的程式碼同步，可以提供一個 :attr:`_order_` "
"屬性。它將與列舉的實際順序進行檢查，如果不符則會引發錯誤::"

#: ../../howto/enum.rst:941
#, fuzzy
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr "在 Python 2 的程式中，:attr:`_order_` 屬性是必要的， "
"因為定義順序在記錄之前就已遺失。"

#: ../../howto/enum.rst:946
#, fuzzy
msgid "_Private__names"
msgstr "私有名稱"

#: ../../howto/enum.rst:948
#, fuzzy
msgid ""
":ref:`Private names <private-name-mangling>` are not converted to enum "
"members, but remain normal attributes."
msgstr ""
"私有名稱（即雙下劃線開頭的屬性或方法）不會轉換成列舉成員，而是保持正常屬性。"
"請參見 :ref:`Private names <private-name-mangling>`。"

#: ../../howto/enum.rst:955
#, fuzzy
msgid "``Enum`` member type"
msgstr "``成員型別（member type）``"

#: ../../howto/enum.rst:957
#, fuzzy
msgid ""
"Enum members are instances of their enum class, and are normally accessed as "
"``EnumClass.member``.  In Python versions ``3.5`` to ``3.10`` you could "
"access members from other members -- this practice was discouraged, and in "
"``3.11`` :class:`Enum` returns to not allowing it::"
msgstr ""
"列舉的成員是其列舉類別的實例，通常作法是透過 ``EnumClass.member`` 來存取。在 "
"Python 版本「3.5」到「3.10」中可以從其他成員存取，但不建議此用法，在版本「3."
"11」之後:class:`Enum` 就不再允許該用法："

#: ../../howto/enum.rst:978
#, fuzzy
msgid "Creating members that are mixed with other data types"
msgstr "建立和其他資料型別混合的夾帶（mixed type）成員"

#: ../../howto/enum.rst:980
#, fuzzy
msgid ""
"When subclassing other data types, such as :class:`int` or :class:`str`, "
"with an :class:`Enum`, all values after the ``=`` are passed to that data "
"type's constructor.  For example::"
msgstr ""
"當需要對其他數據類型（例如 :class:`int` 或 "
":class:`str`）進行父類別派生並使用到:class:`Enum`時，屬於 `=` "
"之後的所有值都會傳遞給該數據類型的建構函式。例如："

#: ../../howto/enum.rst:992
#, fuzzy
msgid "Boolean value of ``Enum`` classes and members"
msgstr "``Enum`` 類別和成員的布林值"

#: ../../howto/enum.rst:994
#, fuzzy
msgid ""
"Enum classes that are mixed with non-:class:`Enum` types (such as :class:"
"`int`, :class:`str`, etc.) are evaluated according to the mixed-in type's "
"rules; otherwise, all members evaluate as :data:`True`.  To make your own "
"enum's boolean evaluation depend on the member's value add the following to "
"your class::"
msgstr ""
"混合了非 :class:`Enum` 型別（例如:class:`int`、:class:`str`等）的枚舉類型，會"
"依據混入型別所規定的規則進行評估；否則，所有成員均評估為:data: `True`. "
"要讓你自己的enum布林求值取決於成員值時，在您的類中添加以下內容："

#: ../../howto/enum.rst:1003
#, fuzzy
msgid "Plain :class:`Enum` classes always evaluate as :data:`True`."
msgstr "通常 :class:`Enum` 類別的值會被評估為 :data:`True`。"

#: ../../howto/enum.rst:1007
#, fuzzy
msgid "``Enum`` classes with methods"
msgstr "具有方法的「列舉」類別"

#: ../../howto/enum.rst:1009
#, fuzzy
msgid ""
"If you give your enum subclass extra methods, like the `Planet`_ class "
"below, those methods will show up in a :func:`dir` of the member, but not of "
"the class::"
msgstr ""
"如果你給你的 enum 子類別新增了一些方法，就像下面這個 `Planet`_ "
"類別，那這些方法會出現在成員（member）的 "
":func:`dir`，但不會出現在枚舉（enum）本身的 :func:`dir` 裡："

#: ../../howto/enum.rst:1020
#, fuzzy
msgid "Combining members of ``Flag``"
msgstr "合併``Flag``的成員"

#: ../../howto/enum.rst:1022
#, fuzzy
msgid ""
"Iterating over a combination of :class:`Flag` members will only return the "
"members that are comprised of a single bit::"
msgstr "迭代 :class:`Flag` 成員的組合將只會回傳由單一位元所構成的成員。"

#: ../../howto/enum.rst:1040
#, fuzzy
msgid "``Flag`` and ``IntFlag`` minutia"
msgstr "`Flag` 和 `IntFlag` 細節部份"

#: ../../howto/enum.rst:1042
#, fuzzy
msgid "Using the following snippet for our examples::"
msgstr ""
"以下我們將運用下列程式碼片段作為範例：```pythonname = 'John'age = 30if age > "
"18:    print(f'{name} is an adult.')else:    print(f'{name} is not yet an "
"adult.')```"

#: ../../howto/enum.rst:1053
#, fuzzy
msgid "the following are true:"
msgstr "以下是真的："

#: ../../howto/enum.rst:1055
#, fuzzy
msgid "single-bit flags are canonical"
msgstr "單位欄位旗標是規範的"

#: ../../howto/enum.rst:1056
#, fuzzy
msgid "multi-bit and zero-bit flags are aliases"
msgstr "多位元標誌和零位元標誌是別名"

#: ../../howto/enum.rst:1057
#, fuzzy
msgid "only canonical flags are returned during iteration::"
msgstr "迭代時只返回正規旗標 (canonical flags)。"

#: ../../howto/enum.rst:1062
#, fuzzy
msgid ""
"negating a flag or flag set returns a new flag/flag set with the "
"corresponding positive integer value::"
msgstr "否定一個旗標或旗標集會傳回對應的正整數值。"

#: ../../howto/enum.rst:1071
#, fuzzy
msgid "names of pseudo-flags are constructed from their members' names::"
msgstr "偽旗標的名稱是由其成員名稱建構而成的："

#: ../../howto/enum.rst:1076
#, fuzzy
msgid "multi-bit flags, aka aliases, can be returned from operations::"
msgstr "多位元旗標，也就是別名，可以從操作中返回："

#: ../../howto/enum.rst:1087
#, fuzzy
msgid ""
"membership / containment checking: zero-valued flags are always considered "
"to be contained::"
msgstr "成員 / 包含測試：零值標誌始終被認為是包含的。"

#: ../../howto/enum.rst:1093
#, fuzzy
msgid ""
"otherwise, only if all bits of one flag are in the other flag will True be "
"returned::"
msgstr "否則，只有當一個標誌的所有位都在另一個標誌中時，才會返回 True："

#: ../../howto/enum.rst:1102
#, fuzzy
msgid ""
"There is a new boundary mechanism that controls how out-of-range / invalid "
"bits are handled: ``STRICT``, ``CONFORM``, ``EJECT``, and ``KEEP``:"
msgstr ""
"有一個新的邊界機制控制超出範圍或無效位元的處理方式: "
"``STRICT``（嚴格）、``CONFORM``（遵從）、``EJECT``（彈出）和 "
"``KEEP``（保留）："

#: ../../howto/enum.rst:1105
#, fuzzy
msgid "STRICT --> raises an exception when presented with invalid values"
msgstr "在遇到無效數值時，STRICT（嚴格模式）會引發一個異常。"

#: ../../howto/enum.rst:1106
#, fuzzy
msgid "CONFORM --> discards any invalid bits"
msgstr "CONFORM --> 丟棄任何無效的位元"

#: ../../howto/enum.rst:1107
#, fuzzy
msgid "EJECT --> lose Flag status and become a normal int with the given value"
msgstr "彈出(EJECT) --> 失去旗標狀態，並成為一個具有給定值的普通整數"

#: ../../howto/enum.rst:1111
#, fuzzy
msgid "KEEP --> keep the extra bits"
msgstr ""
"保留 -> KEEP，也就是保留那些額外的內容。請遵守翻譯規範和使用括號的方式，並確"
"保文本格式符號不受影響。每行的字元數應盡量控制在79個以內，如有超出必須換行。"

#: ../../howto/enum.rst:1109
#, fuzzy
msgid "keeps Flag status and extra bits"
msgstr "保留標誌位狀態和額外的位元"

#: ../../howto/enum.rst:1110
#, fuzzy
msgid "extra bits do not show up in iteration"
msgstr "額外的資料在遍歷時不會出現"

#: ../../howto/enum.rst:1111
#, fuzzy
msgid "extra bits do show up in repr() and str()"
msgstr "在 \\_\\_repr\\_\\_() 和 \\_\\_str\\_\\_() 的輸出中也會顯示額外的資訊"

#: ../../howto/enum.rst:1113
#, fuzzy
msgid ""
"The default for Flag is ``STRICT``, the default for ``IntFlag`` is "
"``EJECT``, and the default for ``_convert_`` is ``KEEP`` (see ``ssl."
"Options`` for an example of when ``KEEP`` is needed)."
msgstr ""
"標記的預設值為「嚴格」(``STRICT``)，IntFlag "
"的預設值為「拋出異常」(``EJECT``)，而 _convert_ "
"的預設值則是「保持現況」(``KEEP``) (請參考 ``ssl.Options`` 中需要使用 "
"``KEEP`` 的範例）。"

#: ../../howto/enum.rst:1121
#, fuzzy
msgid "How are Enums and Flags different?"
msgstr "列舉型別和旗標型別有何不同？"

#: ../../howto/enum.rst:1123
#, fuzzy
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived :"
"class:`Enum` classes and their instances (members)."
msgstr "限定枚舉 (Enums) 有一個獨特的元類，會影響到所有衍生 :class:`Enum` "
"類別及其實例（成員）的許多屬性。"

#: ../../howto/enum.rst:1128
#, fuzzy
msgid "Enum Classes"
msgstr "列舉型別類 (Enum Classes)"

#: ../../howto/enum.rst:1130
#, fuzzy
msgid ""
"The :class:`EnumType` metaclass is responsible for providing the :meth:"
"`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods that "
"allow one to do things with an :class:`Enum` class that fail on a typical "
"class, such as ``list(Color)`` or ``some_enum_var in Color``.  :class:"
"`EnumType` is responsible for ensuring that various other methods on the "
"final :class:`Enum` class are correct (such as :meth:`__new__`, :meth:"
"`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
msgstr ""
":class:`EnumType`(列舉型別) 元類別(meta-class) 負責提供 `__contains__`、 "
"`__dir__`、 `__iter__` 以及其他方法，允許開發人員使用像是 ``list(Color)`` "
"或是 ``some_enum_var in Color`` 的方式對一個 :class:`Enum`(列舉類別)進行操作"
"，而通常類別則無法進行。:class:`EnumType`維護被命名的常數(names constants)，"
"例如 :meth:`__new__.`, :meth:`__getnewargs__.`, :meth:`__str__.`, 和:meth: "
"'__repr__',並確保最終的:class'Enum'(列舉class)符合指定格式。"

#: ../../howto/enum.rst:1139
#, fuzzy
msgid "Flag Classes"
msgstr "旗標類別（Flag Classes）"

#: ../../howto/enum.rst:1141
#, fuzzy
msgid ""
"Flags have an expanded view of aliasing: to be canonical, the value of a "
"flag needs to be a power-of-two value, and not a duplicate name.  So, in "
"addition to the :class:`Enum` definition of alias, a flag with no value (a.k."
"a. ``0``) or with more than one power-of-two value (e.g. ``3``) is "
"considered an alias."
msgstr ""
"標誌有一個更廣泛的別名觀點：為了符合規範，標誌的值需要是二次冪的值，而不是重"
"複的名稱。因此除了使用 :class:`Enum` 別名定義之外，沒有值（a.k.a. "
"`0`)或多於一個二次冪數（例如 `3`）的旗幟也被視為別名。"

#: ../../howto/enum.rst:1147
#, fuzzy
msgid "Enum Members (aka instances)"
msgstr "列舉成員（又稱為實例）"

#: ../../howto/enum.rst:1149
#, fuzzy
msgid ""
"The most interesting thing about enum members is that they are singletons. :"
"class:`EnumType` creates them all while it is creating the enum class "
"itself, and then puts a custom :meth:`__new__` in place to ensure that no "
"new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
"enum 成員最有趣的地方在於它們是單例（singletons）。當 :class:`EnumType` "
"建立枚舉類別本身時，就會一併建立這些成員，並提供自訂的  :meth:`__new__` "
"方法來確保只回傳現有的成員實例，而不會再被實體化出新的。"

#: ../../howto/enum.rst:1155
#, fuzzy
msgid "Flag Members"
msgstr "旗標成員"

#: ../../howto/enum.rst:1157
#, fuzzy
msgid ""
"Flag members can be iterated over just like the :class:`Flag` class, and "
"only the canonical members will be returned.  For example::"
msgstr "旗標成員可像 :class:`Flag` 類別一樣迭代，只有經典成員會被返回。舉例而言："

#: ../../howto/enum.rst:1163
#, fuzzy
msgid "(Note that ``BLACK``, ``PURPLE``, and ``WHITE`` do not show up.)"
msgstr "（請注意，``BLACK``, ``PURPLE`` 和 ``WHITE`` "
"不會出現)注意：本句中的單引號和雙引號皆維持原文不變。"

#: ../../howto/enum.rst:1165
#, fuzzy
msgid ""
"Inverting a flag member returns the corresponding positive value, rather "
"than a negative value --- for example::"
msgstr "反轉旗標成員會返回相應的正值，而不是負值 --- 例如："

#: ../../howto/enum.rst:1171
#, fuzzy
msgid ""
"Flag members have a length corresponding to the number of power-of-two "
"values they contain.  For example::"
msgstr "旗標成員的長度與他們包含的二次冥值相對應。例如:"

#: ../../howto/enum.rst:1181
#, fuzzy
msgid "Enum Cookbook"
msgstr "列舉型別手冊"

#: ../../howto/enum.rst:1184
#, fuzzy
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :class:`Flag`, and :"
"class:`IntFlag` are expected to cover the majority of use-cases, they cannot "
"cover them all.  Here are recipes for some different types of enumerations "
"that can be used directly, or as examples for creating one's own."
msgstr "雖然我們期望 :class:`Enum`、:cl"

#: ../../howto/enum.rst:1191
#, fuzzy
msgid "Omitting values"
msgstr "省略值"

#: ../../howto/enum.rst:1193
#, fuzzy
msgid ""
"In many use-cases, one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr "很多時候，我們不在意列舉(enum)的實際值。定義這種簡單的列舉型別有幾種方式："

#: ../../howto/enum.rst:1196
#, fuzzy
msgid "use instances of :class:`auto` for the value"
msgstr "使用 :class:`auto` 的實例當作值"

#: ../../howto/enum.rst:1197
#, fuzzy
msgid "use instances of :class:`object` as the value"
msgstr "使用 :class:`object` 的實例作為值。"

#: ../../howto/enum.rst:1198
#, fuzzy
msgid "use a descriptive string as the value"
msgstr "使用描述性的字串作為值"

#: ../../howto/enum.rst:1199
#, fuzzy
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr "使用 tuple 作為值，再加上自定義的 :meth:`__new__` 函式來將該 tuple 替換成 "
":class:`int` 型別的值"

#: ../../howto/enum.rst:1202
#, fuzzy
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr "使用這些方法之一，向使用者傳達數值不重要的意涵，也能讓你加入、移除或重新排序"
"成員而不必重新編號其他成員。"

#: ../../howto/enum.rst:1208
#, fuzzy
msgid "Using :class:`auto`"
msgstr "使用 :class:`auto`"

#: ../../howto/enum.rst:1210
#, fuzzy
msgid "Using :class:`auto` would look like::"
msgstr "使用 `auto` 類別會像這樣："

#: ../../howto/enum.rst:1222
#, fuzzy
msgid "Using :class:`object`"
msgstr "使用 `object` 類別"

#: ../../howto/enum.rst:1224
#, fuzzy
msgid "Using :class:`object` would look like::"
msgstr "使用 :class:`object` 會長得像這樣："

#: ../../howto/enum.rst:1234
#, fuzzy
msgid ""
"This is also a good example of why you might want to write your own :meth:"
"`__repr__`::"
msgstr "這也是撰寫自己的 :meth:`__repr__` 的好範例。"

#: ../../howto/enum.rst:1250
#, fuzzy
msgid "Using a descriptive string"
msgstr "使用一個描述字串"

#: ../../howto/enum.rst:1252
#, fuzzy
msgid "Using a string as the value would look like::"
msgstr "將字串用作值的寫法如下所示::"

#: ../../howto/enum.rst:1264
#, fuzzy
msgid "Using a custom :meth:`__new__`"
msgstr "使用自訂的 :meth:`__new__` 方法"

#: ../../howto/enum.rst:1266
#, fuzzy
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr "使用自動編號的 :meth:`__new__` 方法會像這樣:"

#: ../../howto/enum.rst:1283
#, fuzzy
msgid ""
"To make a more general purpose ``AutoNumber``, add ``*args`` to the "
"signature::"
msgstr "為了讓``AutoNumber``成為更多用途的程式，請在函數签名中新增 ``*args``："

#: ../../howto/enum.rst:1293
#, fuzzy
msgid ""
"Then when you inherit from ``AutoNumber`` you can write your own "
"``__init__`` to handle any extra arguments::"
msgstr "當你從 ``AutoNumber`` 繼承時，可以撰寫自己的 `__init__` 來處理任何額外引數："

#: ../../howto/enum.rst:1312
#, fuzzy
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr "如果已定義，:meth:`__new__` 方法會在創建 Enum 成員時使用；然後它會被 Enu"

#: ../../howto/enum.rst:1318
#, fuzzy
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: ../../howto/enum.rst:1320
#, fuzzy
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"一個有序的列舉，它不依據 :class:`IntEnum` 類別而是遵循正常的 :class:`Enum` "
"不變量 （例如不能與其他列舉進行比較）："

#: ../../howto/enum.rst:1354
#, fuzzy
msgid "DuplicateFreeEnum"
msgstr "重複值枚舉 (DuplicateFreeEnum)"

#: ../../howto/enum.rst:1356
#, fuzzy
msgid ""
"Raises an error if a duplicate member value is found instead of creating an "
"alias::"
msgstr "如果出現重複的成員值而不是建立別名，則會引發錯誤："

#: ../../howto/enum.rst:1381
#, fuzzy
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"這是一個有用的範例，可以通過繼承 Enum "
"來添加或修改其他行為以及禁止別名。如果唯一需要的更改是禁止使用別名，"
"那麼可以使用 :func:`unique` 裝飾器。"

#: ../../howto/enum.rst:1387
#, fuzzy
msgid "Planet"
msgstr "Planet"

#: ../../howto/enum.rst:1389
#, fuzzy
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined, the value of the enum "
"member will be passed to those methods::"
msgstr "如果定義了 :meth:`__new__` 或是 "
":meth:`__init__`，將會把該枚舉成員的值傳遞給這些方法。"

#: ../../howto/enum.rst:1418
#, fuzzy
msgid "TimePeriod"
msgstr "TimePeriod（時間期間）"

#: ../../howto/enum.rst:1420
#, fuzzy
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "一個展示使用 :attr:`_ignore_` 屬性的範例："

#: ../../howto/enum.rst:1439
#, fuzzy
msgid "Subclassing EnumType"
msgstr "子類別化 EnumType"

#: ../../howto/enum.rst:1441
#, fuzzy
msgid ""
"While most enum needs can be met by customizing :class:`Enum` subclasses, "
"either with class decorators or custom functions, :class:`EnumType` can be "
"subclassed to provide a different Enum experience."
msgstr ""
"雖然大部分的枚舉需求可以透過客製化 :class:`Enum` subclasses，藉由使用類別裝飾"
"器或是自定義的函數來應付，在創造另一種不同的枚舉體驗時，可以建立 "
":class:`EnumType` 子類別。"
